package org.example;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class EntityManagerImpl {

    public Connection connection=null;

    public EntityManagerImpl() {
        try {
            Class.forName("org.hsqldb.jdbcDriver");
            this.connection = DriverManager.getConnection("jdbc:hsqldb:mem:database", "sa", "");
            System.out.println("test : "+connection);
            this.createTable();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void createTable() {
        try {
            String sql = "CREATE TABLE Club (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, version INT, fabricant VARCHAR(255), poids DOUBLE)";
            this.connection.createStatement().executeUpdate(sql);
            System.out.println("La table 'Club' a été créée.");
        } catch (SQLException e) {
            if (e.getMessage().contains("object name already exists")) {
                System.out.println("La table 'Club' existe déjà.");
            } else {
                throw new RuntimeException("Erreur lors de la création de la table 'Club'", e);
            }
        }
    }



    public void persist(Object entity) {
        try {
            String sql = "INSERT INTO Club (fabricant, poids) VALUES (?, ?)";
            PreparedStatement pstmt = connection.prepareStatement(sql);
            Field fabricantField = entity.getClass().getDeclaredField("fabricant");
            fabricantField.setAccessible(true);
            pstmt.setString(1, (String) fabricantField.get(entity));

            Field poidsField = entity.getClass().getDeclaredField("poids");
            poidsField.setAccessible(true);
            pstmt.setDouble(2, (Double) poidsField.get(entity));

            pstmt.executeUpdate();
        } catch (Exception e) {
            throw new RuntimeException("Problème de persistance de l'entité", e);
        }
    }

    /*public <T> T merge(T entity) {
        if (!(entity instanceof Club)) {
            throw new IllegalArgumentException("L'entité n'est pas une instance de Club");
        }

        Club club = (Club) entity;
        try (PreparedStatement pst = connection.prepareStatement("UPDATE Club SET fabricant = ?, poids = ? WHERE id = ?")) {
            pst.setString(1, club.getFabricant());
            pst.setDouble(2, club.getPoids());
            pst.setLong(3, club.getId());
            int affectedRows = pst.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("La mise à jour a échoué, aucune ligne affectée.");
            }
        } catch (SQLException e) {
            throw new RuntimeException("Erreur lors de la mise à jour", e);
        }
        return entity;
    }*/

    public <T> Club find(Class<T> entityClass, Object primaryKey) {
        Club club = new Club();
        try {
            ResultSet result = this.connection
                    .createStatement(
                            ResultSet.TYPE_SCROLL_INSENSITIVE,
                            ResultSet.CONCUR_UPDATABLE
                    ).executeQuery(
                            "SELECT * FROM Club WHERE id = " + primaryKey
                    );
            if(result.first()) {
                club = new Club((long)primaryKey, result.getInt("version"), result.getString("fabricant"), result.getDouble("poids"));
            }
        } catch(SQLException sqlex) {
            sqlex.printStackTrace();
        }
        return club;
    }
}